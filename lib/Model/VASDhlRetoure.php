<?php
/**
 * VASDhlRetoure
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Shipping API (Post & Parcel Germany)
 *
 * Note: This is the specification of the DPDHL Group Parcel DE Shipping API for Post & Parcel Germany. This REST web service allows business customers to create shipping labels on demand.
 *
 * The version of the OpenAPI document: 2.1.8
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Dhl\Model;

use ArrayAccess;
use OpenAPI\Client\Dhl\ObjectSerializer;

/**
 * VASDhlRetoure Class Doc Comment
 *
 * @category Class
 *
 * @description Requests return label (aka &#39;retoure&#39;) to be provided. Also requires returnAddress and return billing number. Neither weight nor dimension need to be specified for the retoure (flat rate service).
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class VASDhlRetoure implements \JsonSerializable, ArrayAccess, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'VASDhlRetoure';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'billingNumber' => 'string',
        'refNo' => 'string',
        'returnAddress' => '\OpenAPI\Client\Dhl\Model\ContactAddress',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'billingNumber' => null,
        'refNo' => null,
        'returnAddress' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'billingNumber' => false,
        'refNo' => false,
        'returnAddress' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param  bool[]  $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'billingNumber' => 'billingNumber',
        'refNo' => 'refNo',
        'returnAddress' => 'returnAddress',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'billingNumber' => 'setBillingNumber',
        'refNo' => 'setRefNo',
        'returnAddress' => 'setReturnAddress',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'billingNumber' => 'getBillingNumber',
        'refNo' => 'getRefNo',
        'returnAddress' => 'getReturnAddress',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('billingNumber', $data ?? [], null);
        $this->setIfExists('refNo', $data ?? [], null);
        $this->setIfExists('returnAddress', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param  mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['billingNumber'] === null) {
            $invalidProperties[] = "'billingNumber' can't be null";
        }
        if (! preg_match('/\\w{10}\\d{2}\\w{2}/', $this->container['billingNumber'])) {
            $invalidProperties[] = "invalid value for 'billingNumber', must be conform to the pattern /\\w{10}\\d{2}\\w{2}/.";
        }

        if (! is_null($this->container['refNo']) && (mb_strlen($this->container['refNo']) > 50)) {
            $invalidProperties[] = "invalid value for 'refNo', the character length must be smaller than or equal to 50.";
        }

        if (! is_null($this->container['refNo']) && (mb_strlen($this->container['refNo']) < 6)) {
            $invalidProperties[] = "invalid value for 'refNo', the character length must be bigger than or equal to 6.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets billingNumber
     *
     * @return string
     */
    public function getBillingNumber()
    {
        return $this->container['billingNumber'];
    }

    /**
     * Sets billingNumber
     *
     * @param  string  $billingNumber  billingNumber
     * @return self
     */
    public function setBillingNumber($billingNumber)
    {
        if (is_null($billingNumber)) {
            throw new \InvalidArgumentException('non-nullable billingNumber cannot be null');
        }

        if ((! preg_match('/\\w{10}\\d{2}\\w{2}/', ObjectSerializer::toString($billingNumber)))) {
            throw new \InvalidArgumentException('invalid value for $billingNumber when calling VASDhlRetoure., must conform to the pattern /\\w{10}\\d{2}\\w{2}/.');
        }

        $this->container['billingNumber'] = $billingNumber;

        return $this;
    }

    /**
     * Gets refNo
     *
     * @return string|null
     */
    public function getRefNo()
    {
        return $this->container['refNo'];
    }

    /**
     * Sets refNo
     *
     * @param  string|null  $refNo  refNo
     * @return self
     */
    public function setRefNo($refNo)
    {
        if (is_null($refNo)) {
            throw new \InvalidArgumentException('non-nullable refNo cannot be null');
        }
        if ((mb_strlen($refNo) > 50)) {
            throw new \InvalidArgumentException('invalid length for $refNo when calling VASDhlRetoure., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($refNo) < 6)) {
            throw new \InvalidArgumentException('invalid length for $refNo when calling VASDhlRetoure., must be bigger than or equal to 6.');
        }

        $this->container['refNo'] = $refNo;

        return $this;
    }

    /**
     * Gets returnAddress
     *
     * @return \OpenAPI\Client\Dhl\Model\ContactAddress|null
     */
    public function getReturnAddress()
    {
        return $this->container['returnAddress'];
    }

    /**
     * Sets returnAddress
     *
     * @param  \OpenAPI\Client\Dhl\Model\ContactAddress|null  $returnAddress  returnAddress
     * @return self
     */
    public function setReturnAddress($returnAddress)
    {
        if (is_null($returnAddress)) {
            throw new \InvalidArgumentException('non-nullable returnAddress cannot be null');
        }
        $this->container['returnAddress'] = $returnAddress;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int|null  $offset  Offset
     * @param  mixed  $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
