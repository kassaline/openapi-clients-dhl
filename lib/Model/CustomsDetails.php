<?php
/**
 * CustomsDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Dhl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Shipping API (Post & Parcel Germany)
 *
 * Note: This is the specification of the DPDHL Group Parcel DE Shipping API for Post & Parcel Germany. This REST web service allows business customers to create shipping labels on demand.
 *
 * The version of the OpenAPI document: 2.1.12
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Dhl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Dhl\ObjectSerializer;

/**
 * CustomsDetails Class Doc Comment
 *
 * @category Class
 * @description For international shipments, this section contains information necessary for customs about the exported goods. ExportDocument can contain one or more positions as child element. This data is also transferred as electronic declaration to customs. The custom details are mandatory depending on whether the parcel will go to a country outside the European Customs Union. For DHL Parcel International (V53WPAK) CN23 will returned as a separate document, while for Warenpost International the customs information will be printed onto the shipment label (CN22).
 * @package  OpenAPI\Client\Dhl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CustomsDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomsDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoiceNo' => 'string',
        'exportType' => 'string',
        'exportDescription' => 'string',
        'shippingConditions' => 'string',
        'permitNo' => 'string',
        'attestationNo' => 'string',
        'hasElectronicExportNotification' => 'bool',
        'mRN' => 'string',
        'postalCharges' => '\OpenAPI\Client\Dhl\Model\Value',
        'officeOfOrigin' => 'string',
        'shipperCustomsRef' => 'string',
        'consigneeCustomsRef' => 'string',
        'items' => '\OpenAPI\Client\Dhl\Model\Commodity[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoiceNo' => null,
        'exportType' => null,
        'exportDescription' => null,
        'shippingConditions' => null,
        'permitNo' => null,
        'attestationNo' => null,
        'hasElectronicExportNotification' => null,
        'mRN' => null,
        'postalCharges' => null,
        'officeOfOrigin' => null,
        'shipperCustomsRef' => null,
        'consigneeCustomsRef' => null,
        'items' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoiceNo' => false,
        'exportType' => false,
        'exportDescription' => false,
        'shippingConditions' => false,
        'permitNo' => false,
        'attestationNo' => false,
        'hasElectronicExportNotification' => false,
        'mRN' => false,
        'postalCharges' => false,
        'officeOfOrigin' => false,
        'shipperCustomsRef' => false,
        'consigneeCustomsRef' => false,
        'items' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoiceNo' => 'invoiceNo',
        'exportType' => 'exportType',
        'exportDescription' => 'exportDescription',
        'shippingConditions' => 'shippingConditions',
        'permitNo' => 'permitNo',
        'attestationNo' => 'attestationNo',
        'hasElectronicExportNotification' => 'hasElectronicExportNotification',
        'mRN' => 'MRN',
        'postalCharges' => 'postalCharges',
        'officeOfOrigin' => 'officeOfOrigin',
        'shipperCustomsRef' => 'shipperCustomsRef',
        'consigneeCustomsRef' => 'consigneeCustomsRef',
        'items' => 'items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoiceNo' => 'setInvoiceNo',
        'exportType' => 'setExportType',
        'exportDescription' => 'setExportDescription',
        'shippingConditions' => 'setShippingConditions',
        'permitNo' => 'setPermitNo',
        'attestationNo' => 'setAttestationNo',
        'hasElectronicExportNotification' => 'setHasElectronicExportNotification',
        'mRN' => 'setMRN',
        'postalCharges' => 'setPostalCharges',
        'officeOfOrigin' => 'setOfficeOfOrigin',
        'shipperCustomsRef' => 'setShipperCustomsRef',
        'consigneeCustomsRef' => 'setConsigneeCustomsRef',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoiceNo' => 'getInvoiceNo',
        'exportType' => 'getExportType',
        'exportDescription' => 'getExportDescription',
        'shippingConditions' => 'getShippingConditions',
        'permitNo' => 'getPermitNo',
        'attestationNo' => 'getAttestationNo',
        'hasElectronicExportNotification' => 'getHasElectronicExportNotification',
        'mRN' => 'getMRN',
        'postalCharges' => 'getPostalCharges',
        'officeOfOrigin' => 'getOfficeOfOrigin',
        'shipperCustomsRef' => 'getShipperCustomsRef',
        'consigneeCustomsRef' => 'getConsigneeCustomsRef',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const EXPORT_TYPE_OTHER = 'OTHER';
    public const EXPORT_TYPE_PRESENT = 'PRESENT';
    public const EXPORT_TYPE_COMMERCIAL_SAMPLE = 'COMMERCIAL_SAMPLE';
    public const EXPORT_TYPE_DOCUMENT = 'DOCUMENT';
    public const EXPORT_TYPE_RETURN_OF_GOODS = 'RETURN_OF_GOODS';
    public const EXPORT_TYPE_COMMERCIAL_GOODS = 'COMMERCIAL_GOODS';
    public const SHIPPING_CONDITIONS_DDU = 'DDU';
    public const SHIPPING_CONDITIONS_DAP = 'DAP';
    public const SHIPPING_CONDITIONS_DDP = 'DDP';
    public const SHIPPING_CONDITIONS_DDX = 'DDX';
    public const SHIPPING_CONDITIONS_DXV = 'DXV';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getExportTypeAllowableValues()
    {
        return [
            self::EXPORT_TYPE_OTHER,
            self::EXPORT_TYPE_PRESENT,
            self::EXPORT_TYPE_COMMERCIAL_SAMPLE,
            self::EXPORT_TYPE_DOCUMENT,
            self::EXPORT_TYPE_RETURN_OF_GOODS,
            self::EXPORT_TYPE_COMMERCIAL_GOODS,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingConditionsAllowableValues()
    {
        return [
            self::SHIPPING_CONDITIONS_DDU,
            self::SHIPPING_CONDITIONS_DAP,
            self::SHIPPING_CONDITIONS_DDP,
            self::SHIPPING_CONDITIONS_DDX,
            self::SHIPPING_CONDITIONS_DXV,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('invoiceNo', $data ?? [], null);
        $this->setIfExists('exportType', $data ?? [], null);
        $this->setIfExists('exportDescription', $data ?? [], null);
        $this->setIfExists('shippingConditions', $data ?? [], null);
        $this->setIfExists('permitNo', $data ?? [], null);
        $this->setIfExists('attestationNo', $data ?? [], null);
        $this->setIfExists('hasElectronicExportNotification', $data ?? [], null);
        $this->setIfExists('mRN', $data ?? [], null);
        $this->setIfExists('postalCharges', $data ?? [], null);
        $this->setIfExists('officeOfOrigin', $data ?? [], null);
        $this->setIfExists('shipperCustomsRef', $data ?? [], null);
        $this->setIfExists('consigneeCustomsRef', $data ?? [], null);
        $this->setIfExists('items', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['invoiceNo']) && (mb_strlen($this->container['invoiceNo']) > 35)) {
            $invalidProperties[] = "invalid value for 'invoiceNo', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['invoiceNo']) && (mb_strlen($this->container['invoiceNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'invoiceNo', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['exportType'] === null) {
            $invalidProperties[] = "'exportType' can't be null";
        }
        $allowedValues = $this->getExportTypeAllowableValues();
        if (!is_null($this->container['exportType']) && !in_array($this->container['exportType'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'exportType', must be one of '%s'",
                $this->container['exportType'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['exportDescription']) && (mb_strlen($this->container['exportDescription']) > 80)) {
            $invalidProperties[] = "invalid value for 'exportDescription', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['exportDescription']) && (mb_strlen($this->container['exportDescription']) < 0)) {
            $invalidProperties[] = "invalid value for 'exportDescription', the character length must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getShippingConditionsAllowableValues();
        if (!is_null($this->container['shippingConditions']) && !in_array($this->container['shippingConditions'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shippingConditions', must be one of '%s'",
                $this->container['shippingConditions'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['permitNo']) && (mb_strlen($this->container['permitNo']) > 30)) {
            $invalidProperties[] = "invalid value for 'permitNo', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['permitNo']) && (mb_strlen($this->container['permitNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'permitNo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['attestationNo']) && (mb_strlen($this->container['attestationNo']) > 30)) {
            $invalidProperties[] = "invalid value for 'attestationNo', the character length must be smaller than or equal to 30.";
        }

        if (!is_null($this->container['attestationNo']) && (mb_strlen($this->container['attestationNo']) < 0)) {
            $invalidProperties[] = "invalid value for 'attestationNo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mRN']) && (mb_strlen($this->container['mRN']) > 18)) {
            $invalidProperties[] = "invalid value for 'mRN', the character length must be smaller than or equal to 18.";
        }

        if ($this->container['postalCharges'] === null) {
            $invalidProperties[] = "'postalCharges' can't be null";
        }
        if (!is_null($this->container['officeOfOrigin']) && (mb_strlen($this->container['officeOfOrigin']) > 35)) {
            $invalidProperties[] = "invalid value for 'officeOfOrigin', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['officeOfOrigin']) && (mb_strlen($this->container['officeOfOrigin']) < 0)) {
            $invalidProperties[] = "invalid value for 'officeOfOrigin', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['shipperCustomsRef']) && (mb_strlen($this->container['shipperCustomsRef']) > 35)) {
            $invalidProperties[] = "invalid value for 'shipperCustomsRef', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['consigneeCustomsRef']) && (mb_strlen($this->container['consigneeCustomsRef']) > 35)) {
            $invalidProperties[] = "invalid value for 'consigneeCustomsRef', the character length must be smaller than or equal to 35.";
        }

        if ($this->container['items'] === null) {
            $invalidProperties[] = "'items' can't be null";
        }
        if ((count($this->container['items']) > 99)) {
            $invalidProperties[] = "invalid value for 'items', number of items must be less than or equal to 99.";
        }

        if ((count($this->container['items']) < 1)) {
            $invalidProperties[] = "invalid value for 'items', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoiceNo
     *
     * @return string|null
     */
    public function getInvoiceNo()
    {
        return $this->container['invoiceNo'];
    }

    /**
     * Sets invoiceNo
     *
     * @param string|null $invoiceNo Invoice number
     *
     * @return self
     */
    public function setInvoiceNo($invoiceNo)
    {
        if (is_null($invoiceNo)) {
            throw new \InvalidArgumentException('non-nullable invoiceNo cannot be null');
        }
        if ((mb_strlen($invoiceNo) > 35)) {
            throw new \InvalidArgumentException('invalid length for $invoiceNo when calling CustomsDetails., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($invoiceNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $invoiceNo when calling CustomsDetails., must be bigger than or equal to 0.');
        }

        $this->container['invoiceNo'] = $invoiceNo;

        return $this;
    }

    /**
     * Gets exportType
     *
     * @return string
     */
    public function getExportType()
    {
        return $this->container['exportType'];
    }

    /**
     * Sets exportType
     *
     * @param string $exportType This contains the category of goods contained in parcel.
     *
     * @return self
     */
    public function setExportType($exportType)
    {
        if (is_null($exportType)) {
            throw new \InvalidArgumentException('non-nullable exportType cannot be null');
        }
        $allowedValues = $this->getExportTypeAllowableValues();
        if (!in_array($exportType, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'exportType', must be one of '%s'",
                    $exportType,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['exportType'] = $exportType;

        return $this;
    }

    /**
     * Gets exportDescription
     *
     * @return string|null
     */
    public function getExportDescription()
    {
        return $this->container['exportDescription'];
    }

    /**
     * Sets exportDescription
     *
     * @param string|null $exportDescription Mandatory if exporttype is 'OTHER'
     *
     * @return self
     */
    public function setExportDescription($exportDescription)
    {
        if (is_null($exportDescription)) {
            throw new \InvalidArgumentException('non-nullable exportDescription cannot be null');
        }
        if ((mb_strlen($exportDescription) > 80)) {
            throw new \InvalidArgumentException('invalid length for $exportDescription when calling CustomsDetails., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($exportDescription) < 0)) {
            throw new \InvalidArgumentException('invalid length for $exportDescription when calling CustomsDetails., must be bigger than or equal to 0.');
        }

        $this->container['exportDescription'] = $exportDescription;

        return $this;
    }

    /**
     * Gets shippingConditions
     *
     * @return string|null
     */
    public function getShippingConditions()
    {
        return $this->container['shippingConditions'];
    }

    /**
     * Sets shippingConditions
     *
     * @param string|null $shippingConditions Aka 'Terms of Trade' aka 'Frankatur'. The attribute is exclusively used for the product Europaket (V54EPAK). DDU is deprecated (use DAP instead).
     *
     * @return self
     */
    public function setShippingConditions($shippingConditions)
    {
        if (is_null($shippingConditions)) {
            throw new \InvalidArgumentException('non-nullable shippingConditions cannot be null');
        }
        $allowedValues = $this->getShippingConditionsAllowableValues();
        if (!in_array($shippingConditions, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shippingConditions', must be one of '%s'",
                    $shippingConditions,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shippingConditions'] = $shippingConditions;

        return $this;
    }

    /**
     * Gets permitNo
     *
     * @return string|null
     */
    public function getPermitNo()
    {
        return $this->container['permitNo'];
    }

    /**
     * Sets permitNo
     *
     * @param string|null $permitNo Permit number. Very rarely needed. Mostly relevant for higher value goods. An example use case would be an item made from crocodile leather which requires dedicated license / permit identified by that number.
     *
     * @return self
     */
    public function setPermitNo($permitNo)
    {
        if (is_null($permitNo)) {
            throw new \InvalidArgumentException('non-nullable permitNo cannot be null');
        }
        if ((mb_strlen($permitNo) > 30)) {
            throw new \InvalidArgumentException('invalid length for $permitNo when calling CustomsDetails., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($permitNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $permitNo when calling CustomsDetails., must be bigger than or equal to 0.');
        }

        $this->container['permitNo'] = $permitNo;

        return $this;
    }

    /**
     * Gets attestationNo
     *
     * @return string|null
     */
    public function getAttestationNo()
    {
        return $this->container['attestationNo'];
    }

    /**
     * Sets attestationNo
     *
     * @param string|null $attestationNo Attest or certification identified by this number. Very rarely needed. An example use case would be a medical shipment referring to an attestation that a certain amount of medicine may be imported within e.g. the current quarter of the year.
     *
     * @return self
     */
    public function setAttestationNo($attestationNo)
    {
        if (is_null($attestationNo)) {
            throw new \InvalidArgumentException('non-nullable attestationNo cannot be null');
        }
        if ((mb_strlen($attestationNo) > 30)) {
            throw new \InvalidArgumentException('invalid length for $attestationNo when calling CustomsDetails., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($attestationNo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $attestationNo when calling CustomsDetails., must be bigger than or equal to 0.');
        }

        $this->container['attestationNo'] = $attestationNo;

        return $this;
    }

    /**
     * Gets hasElectronicExportNotification
     *
     * @return bool|null
     */
    public function getHasElectronicExportNotification()
    {
        return $this->container['hasElectronicExportNotification'];
    }

    /**
     * Sets hasElectronicExportNotification
     *
     * @param bool|null $hasElectronicExportNotification flag confirming whether electronic record for export was made
     *
     * @return self
     */
    public function setHasElectronicExportNotification($hasElectronicExportNotification)
    {
        if (is_null($hasElectronicExportNotification)) {
            throw new \InvalidArgumentException('non-nullable hasElectronicExportNotification cannot be null');
        }
        $this->container['hasElectronicExportNotification'] = $hasElectronicExportNotification;

        return $this;
    }

    /**
     * Gets mRN
     *
     * @return string|null
     */
    public function getMRN()
    {
        return $this->container['mRN'];
    }

    /**
     * Sets mRN
     *
     * @param string|null $mRN mRN
     *
     * @return self
     */
    public function setMRN($mRN)
    {
        if (is_null($mRN)) {
            throw new \InvalidArgumentException('non-nullable mRN cannot be null');
        }
        if ((mb_strlen($mRN) > 18)) {
            throw new \InvalidArgumentException('invalid length for $mRN when calling CustomsDetails., must be smaller than or equal to 18.');
        }

        $this->container['mRN'] = $mRN;

        return $this;
    }

    /**
     * Gets postalCharges
     *
     * @return \OpenAPI\Client\Dhl\Model\Value
     */
    public function getPostalCharges()
    {
        return $this->container['postalCharges'];
    }

    /**
     * Sets postalCharges
     *
     * @param \OpenAPI\Client\Dhl\Model\Value $postalCharges Postal charges that have been charged to the recipient. The information must match the information on the invoice. Postal charges are added to the customs value which is the basis for the calculation of import duties. Since 1.1.2021 this information is mandatory according to requirements of the Universal Postal Union. The currency of the postal charges is used throughout the customs declaration form. The currency details of the individual goods items are overwritten by the currency details of the postal charges.
     *
     * @return self
     */
    public function setPostalCharges($postalCharges)
    {
        if (is_null($postalCharges)) {
            throw new \InvalidArgumentException('non-nullable postalCharges cannot be null');
        }
        $this->container['postalCharges'] = $postalCharges;

        return $this;
    }

    /**
     * Gets officeOfOrigin
     *
     * @return string|null
     */
    public function getOfficeOfOrigin()
    {
        return $this->container['officeOfOrigin'];
    }

    /**
     * Sets officeOfOrigin
     *
     * @param string|null $officeOfOrigin Optional. Will appear on CN23.
     *
     * @return self
     */
    public function setOfficeOfOrigin($officeOfOrigin)
    {
        if (is_null($officeOfOrigin)) {
            throw new \InvalidArgumentException('non-nullable officeOfOrigin cannot be null');
        }
        if ((mb_strlen($officeOfOrigin) > 35)) {
            throw new \InvalidArgumentException('invalid length for $officeOfOrigin when calling CustomsDetails., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($officeOfOrigin) < 0)) {
            throw new \InvalidArgumentException('invalid length for $officeOfOrigin when calling CustomsDetails., must be bigger than or equal to 0.');
        }

        $this->container['officeOfOrigin'] = $officeOfOrigin;

        return $this;
    }

    /**
     * Gets shipperCustomsRef
     *
     * @return string|null
     */
    public function getShipperCustomsRef()
    {
        return $this->container['shipperCustomsRef'];
    }

    /**
     * Sets shipperCustomsRef
     *
     * @param string|null $shipperCustomsRef Optional. The customs reference is used by customs authorities to identify economics operators an/or other persons involved. With the given reference, granted authorizations and/or relevant processes in customs clearance an/or taxation can be taken into account. Aka Zoll-Nummer or EORI-Number but dependent on destination.
     *
     * @return self
     */
    public function setShipperCustomsRef($shipperCustomsRef)
    {
        if (is_null($shipperCustomsRef)) {
            throw new \InvalidArgumentException('non-nullable shipperCustomsRef cannot be null');
        }
        if ((mb_strlen($shipperCustomsRef) > 35)) {
            throw new \InvalidArgumentException('invalid length for $shipperCustomsRef when calling CustomsDetails., must be smaller than or equal to 35.');
        }

        $this->container['shipperCustomsRef'] = $shipperCustomsRef;

        return $this;
    }

    /**
     * Gets consigneeCustomsRef
     *
     * @return string|null
     */
    public function getConsigneeCustomsRef()
    {
        return $this->container['consigneeCustomsRef'];
    }

    /**
     * Sets consigneeCustomsRef
     *
     * @param string|null $consigneeCustomsRef Optional. The customs reference is used by customs authorities to identify economics operators an/or other persons involved. With the given reference, granted authorizations and/or relevant processes in customs clearance an/or taxation can be taken into account. Aka Zoll-Nummer or EORI-Number but dependent on destination.
     *
     * @return self
     */
    public function setConsigneeCustomsRef($consigneeCustomsRef)
    {
        if (is_null($consigneeCustomsRef)) {
            throw new \InvalidArgumentException('non-nullable consigneeCustomsRef cannot be null');
        }
        if ((mb_strlen($consigneeCustomsRef) > 35)) {
            throw new \InvalidArgumentException('invalid length for $consigneeCustomsRef when calling CustomsDetails., must be smaller than or equal to 35.');
        }

        $this->container['consigneeCustomsRef'] = $consigneeCustomsRef;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Dhl\Model\Commodity[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Dhl\Model\Commodity[] $items Commodity types in that package
     *
     * @return self
     */
    public function setItems($items)
    {
        if (is_null($items)) {
            throw new \InvalidArgumentException('non-nullable items cannot be null');
        }

        if ((count($items) > 99)) {
            throw new \InvalidArgumentException('invalid value for $items when calling CustomsDetails., number of items must be less than or equal to 99.');
        }
        if ((count($items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $items when calling CustomsDetails., number of items must be greater than or equal to 1.');
        }
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


