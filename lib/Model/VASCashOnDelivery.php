<?php
/**
 * VASCashOnDelivery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Dhl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Shipping API (Post & Parcel Germany)
 *
 * Note: This is the specification of the DPDHL Group Parcel DE Shipping API for Post & Parcel Germany. This REST web service allows business customers to create shipping labels on demand.
 *
 * The version of the OpenAPI document: 2.1.12
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Dhl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Dhl\ObjectSerializer;

/**
 * VASCashOnDelivery Class Doc Comment
 *
 * @category Class
 * @description Cash on delivery (Nachnahme). Currency must be Euro. Either bank account information or account reference (from customer profile) must be provided. Transfernote1 + 2 are references transmitted during bank transfer. Providing account information explicitly requires elevated privileges.
 * @package  OpenAPI\Client\Dhl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VASCashOnDelivery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VASCashOnDelivery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => '\OpenAPI\Client\Dhl\Model\Value',
        'bankAccount' => '\OpenAPI\Client\Dhl\Model\BankAccount',
        'accountReference' => 'string',
        'transferNote1' => 'string',
        'transferNote2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'bankAccount' => null,
        'accountReference' => null,
        'transferNote1' => null,
        'transferNote2' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => false,
        'bankAccount' => false,
        'accountReference' => false,
        'transferNote1' => false,
        'transferNote2' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'bankAccount' => 'bankAccount',
        'accountReference' => 'accountReference',
        'transferNote1' => 'transferNote1',
        'transferNote2' => 'transferNote2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'bankAccount' => 'setBankAccount',
        'accountReference' => 'setAccountReference',
        'transferNote1' => 'setTransferNote1',
        'transferNote2' => 'setTransferNote2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'bankAccount' => 'getBankAccount',
        'accountReference' => 'getAccountReference',
        'transferNote1' => 'getTransferNote1',
        'transferNote2' => 'getTransferNote2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('bankAccount', $data ?? [], null);
        $this->setIfExists('accountReference', $data ?? [], null);
        $this->setIfExists('transferNote1', $data ?? [], null);
        $this->setIfExists('transferNote2', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['accountReference']) && (mb_strlen($this->container['accountReference']) > 35)) {
            $invalidProperties[] = "invalid value for 'accountReference', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['accountReference']) && (mb_strlen($this->container['accountReference']) < 0)) {
            $invalidProperties[] = "invalid value for 'accountReference', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['transferNote1']) && (mb_strlen($this->container['transferNote1']) > 35)) {
            $invalidProperties[] = "invalid value for 'transferNote1', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['transferNote1']) && (mb_strlen($this->container['transferNote1']) < 0)) {
            $invalidProperties[] = "invalid value for 'transferNote1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['transferNote2']) && (mb_strlen($this->container['transferNote2']) > 35)) {
            $invalidProperties[] = "invalid value for 'transferNote2', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['transferNote2']) && (mb_strlen($this->container['transferNote2']) < 0)) {
            $invalidProperties[] = "invalid value for 'transferNote2', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return \OpenAPI\Client\Dhl\Model\Value|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \OpenAPI\Client\Dhl\Model\Value|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets bankAccount
     *
     * @return \OpenAPI\Client\Dhl\Model\BankAccount|null
     */
    public function getBankAccount()
    {
        return $this->container['bankAccount'];
    }

    /**
     * Sets bankAccount
     *
     * @param \OpenAPI\Client\Dhl\Model\BankAccount|null $bankAccount bankAccount
     *
     * @return self
     */
    public function setBankAccount($bankAccount)
    {
        if (is_null($bankAccount)) {
            throw new \InvalidArgumentException('non-nullable bankAccount cannot be null');
        }
        $this->container['bankAccount'] = $bankAccount;

        return $this;
    }

    /**
     * Gets accountReference
     *
     * @return string|null
     */
    public function getAccountReference()
    {
        return $this->container['accountReference'];
    }

    /**
     * Sets accountReference
     *
     * @param string|null $accountReference Reference to bank account details. Account references are maintained in customer settings in Post & DHL business customer portal under Ship -> Settings -> Cash on delivery. Please note, that the default account reference is used if the provided account reference does not exist in your customer settings!
     *
     * @return self
     */
    public function setAccountReference($accountReference)
    {
        if (is_null($accountReference)) {
            throw new \InvalidArgumentException('non-nullable accountReference cannot be null');
        }
        if ((mb_strlen($accountReference) > 35)) {
            throw new \InvalidArgumentException('invalid length for $accountReference when calling VASCashOnDelivery., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($accountReference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $accountReference when calling VASCashOnDelivery., must be bigger than or equal to 0.');
        }

        $this->container['accountReference'] = $accountReference;

        return $this;
    }

    /**
     * Gets transferNote1
     *
     * @return string|null
     */
    public function getTransferNote1()
    {
        return $this->container['transferNote1'];
    }

    /**
     * Sets transferNote1
     *
     * @param string|null $transferNote1 transferNote1
     *
     * @return self
     */
    public function setTransferNote1($transferNote1)
    {
        if (is_null($transferNote1)) {
            throw new \InvalidArgumentException('non-nullable transferNote1 cannot be null');
        }
        if ((mb_strlen($transferNote1) > 35)) {
            throw new \InvalidArgumentException('invalid length for $transferNote1 when calling VASCashOnDelivery., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($transferNote1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $transferNote1 when calling VASCashOnDelivery., must be bigger than or equal to 0.');
        }

        $this->container['transferNote1'] = $transferNote1;

        return $this;
    }

    /**
     * Gets transferNote2
     *
     * @return string|null
     */
    public function getTransferNote2()
    {
        return $this->container['transferNote2'];
    }

    /**
     * Sets transferNote2
     *
     * @param string|null $transferNote2 transferNote2
     *
     * @return self
     */
    public function setTransferNote2($transferNote2)
    {
        if (is_null($transferNote2)) {
            throw new \InvalidArgumentException('non-nullable transferNote2 cannot be null');
        }
        if ((mb_strlen($transferNote2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $transferNote2 when calling VASCashOnDelivery., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($transferNote2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $transferNote2 when calling VASCashOnDelivery., must be bigger than or equal to 0.');
        }

        $this->container['transferNote2'] = $transferNote2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


