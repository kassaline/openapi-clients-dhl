<?php
/**
 * Consignee
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client\Dhl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Shipping API (Post & Parcel Germany)
 *
 * Note: This is the specification of the DPDHL Group Parcel DE Shipping API for Post & Parcel Germany. This REST web service allows business customers to create shipping labels on demand.
 *
 * The version of the OpenAPI document: 2.1.12
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Dhl\Model;

use \ArrayAccess;
use \OpenAPI\Client\Dhl\ObjectSerializer;

/**
 * Consignee Class Doc Comment
 *
 * @category Class
 * @description Consignee address information. Either a doorstep address (contact address) including contact information or a droppoint address. One of packstation (parcel locker), or post office (postfiliale/retail shop).
 * @package  OpenAPI\Client\Dhl
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Consignee implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Consignee';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name1' => 'string',
        'name2' => 'string',
        'name3' => 'string',
        'dispatchingInformation' => 'string',
        'addressStreet' => 'string',
        'addressHouse' => 'string',
        'additionalAddressInformation1' => 'string',
        'additionalAddressInformation2' => 'string',
        'postalCode' => 'string',
        'city' => 'string',
        'state' => 'string',
        'country' => '\OpenAPI\Client\Dhl\Model\Country',
        'contactName' => 'string',
        'phone' => 'string',
        'email' => 'string',
        'name' => 'string',
        'lockerID' => 'int',
        'postNumber' => 'string',
        'retailID' => 'int',
        'poBoxID' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name1' => null,
        'name2' => null,
        'name3' => null,
        'dispatchingInformation' => null,
        'addressStreet' => null,
        'addressHouse' => null,
        'additionalAddressInformation1' => null,
        'additionalAddressInformation2' => null,
        'postalCode' => null,
        'city' => null,
        'state' => null,
        'country' => null,
        'contactName' => null,
        'phone' => null,
        'email' => null,
        'name' => null,
        'lockerID' => 'int32',
        'postNumber' => null,
        'retailID' => 'int32',
        'poBoxID' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name1' => false,
        'name2' => false,
        'name3' => false,
        'dispatchingInformation' => false,
        'addressStreet' => false,
        'addressHouse' => false,
        'additionalAddressInformation1' => false,
        'additionalAddressInformation2' => false,
        'postalCode' => false,
        'city' => false,
        'state' => false,
        'country' => false,
        'contactName' => false,
        'phone' => false,
        'email' => false,
        'name' => false,
        'lockerID' => false,
        'postNumber' => false,
        'retailID' => false,
        'poBoxID' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name1' => 'name1',
        'name2' => 'name2',
        'name3' => 'name3',
        'dispatchingInformation' => 'dispatchingInformation',
        'addressStreet' => 'addressStreet',
        'addressHouse' => 'addressHouse',
        'additionalAddressInformation1' => 'additionalAddressInformation1',
        'additionalAddressInformation2' => 'additionalAddressInformation2',
        'postalCode' => 'postalCode',
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'contactName' => 'contactName',
        'phone' => 'phone',
        'email' => 'email',
        'name' => 'name',
        'lockerID' => 'lockerID',
        'postNumber' => 'postNumber',
        'retailID' => 'retailID',
        'poBoxID' => 'poBoxID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name1' => 'setName1',
        'name2' => 'setName2',
        'name3' => 'setName3',
        'dispatchingInformation' => 'setDispatchingInformation',
        'addressStreet' => 'setAddressStreet',
        'addressHouse' => 'setAddressHouse',
        'additionalAddressInformation1' => 'setAdditionalAddressInformation1',
        'additionalAddressInformation2' => 'setAdditionalAddressInformation2',
        'postalCode' => 'setPostalCode',
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'contactName' => 'setContactName',
        'phone' => 'setPhone',
        'email' => 'setEmail',
        'name' => 'setName',
        'lockerID' => 'setLockerID',
        'postNumber' => 'setPostNumber',
        'retailID' => 'setRetailID',
        'poBoxID' => 'setPoBoxID'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name1' => 'getName1',
        'name2' => 'getName2',
        'name3' => 'getName3',
        'dispatchingInformation' => 'getDispatchingInformation',
        'addressStreet' => 'getAddressStreet',
        'addressHouse' => 'getAddressHouse',
        'additionalAddressInformation1' => 'getAdditionalAddressInformation1',
        'additionalAddressInformation2' => 'getAdditionalAddressInformation2',
        'postalCode' => 'getPostalCode',
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'contactName' => 'getContactName',
        'phone' => 'getPhone',
        'email' => 'getEmail',
        'name' => 'getName',
        'lockerID' => 'getLockerID',
        'postNumber' => 'getPostNumber',
        'retailID' => 'getRetailID',
        'poBoxID' => 'getPoBoxID'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('name1', $data ?? [], null);
        $this->setIfExists('name2', $data ?? [], null);
        $this->setIfExists('name3', $data ?? [], null);
        $this->setIfExists('dispatchingInformation', $data ?? [], null);
        $this->setIfExists('addressStreet', $data ?? [], null);
        $this->setIfExists('addressHouse', $data ?? [], null);
        $this->setIfExists('additionalAddressInformation1', $data ?? [], null);
        $this->setIfExists('additionalAddressInformation2', $data ?? [], null);
        $this->setIfExists('postalCode', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('contactName', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('lockerID', $data ?? [], null);
        $this->setIfExists('postNumber', $data ?? [], null);
        $this->setIfExists('retailID', $data ?? [], null);
        $this->setIfExists('poBoxID', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name1'] === null) {
            $invalidProperties[] = "'name1' can't be null";
        }
        if ((mb_strlen($this->container['name1']) > 50)) {
            $invalidProperties[] = "invalid value for 'name1', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name1']) < 1)) {
            $invalidProperties[] = "invalid value for 'name1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name2']) && (mb_strlen($this->container['name2']) > 50)) {
            $invalidProperties[] = "invalid value for 'name2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name2']) && (mb_strlen($this->container['name2']) < 1)) {
            $invalidProperties[] = "invalid value for 'name2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['name3']) && (mb_strlen($this->container['name3']) > 50)) {
            $invalidProperties[] = "invalid value for 'name3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name3']) && (mb_strlen($this->container['name3']) < 1)) {
            $invalidProperties[] = "invalid value for 'name3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['dispatchingInformation']) && (mb_strlen($this->container['dispatchingInformation']) > 35)) {
            $invalidProperties[] = "invalid value for 'dispatchingInformation', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['dispatchingInformation']) && (mb_strlen($this->container['dispatchingInformation']) < 1)) {
            $invalidProperties[] = "invalid value for 'dispatchingInformation', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['addressStreet'] === null) {
            $invalidProperties[] = "'addressStreet' can't be null";
        }
        if ((mb_strlen($this->container['addressStreet']) > 50)) {
            $invalidProperties[] = "invalid value for 'addressStreet', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['addressStreet']) < 1)) {
            $invalidProperties[] = "invalid value for 'addressStreet', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['addressHouse']) && (mb_strlen($this->container['addressHouse']) > 10)) {
            $invalidProperties[] = "invalid value for 'addressHouse', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['addressHouse']) && (mb_strlen($this->container['addressHouse']) < 1)) {
            $invalidProperties[] = "invalid value for 'addressHouse', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['additionalAddressInformation1']) && (mb_strlen($this->container['additionalAddressInformation1']) > 60)) {
            $invalidProperties[] = "invalid value for 'additionalAddressInformation1', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['additionalAddressInformation1']) && (mb_strlen($this->container['additionalAddressInformation1']) < 1)) {
            $invalidProperties[] = "invalid value for 'additionalAddressInformation1', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['additionalAddressInformation2']) && (mb_strlen($this->container['additionalAddressInformation2']) > 60)) {
            $invalidProperties[] = "invalid value for 'additionalAddressInformation2', the character length must be smaller than or equal to 60.";
        }

        if (!is_null($this->container['additionalAddressInformation2']) && (mb_strlen($this->container['additionalAddressInformation2']) < 1)) {
            $invalidProperties[] = "invalid value for 'additionalAddressInformation2', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['postalCode'] === null) {
            $invalidProperties[] = "'postalCode' can't be null";
        }
        if ((mb_strlen($this->container['postalCode']) > 10)) {
            $invalidProperties[] = "invalid value for 'postalCode', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['postalCode']) < 3)) {
            $invalidProperties[] = "invalid value for 'postalCode', the character length must be bigger than or equal to 3.";
        }

        if (!preg_match("/^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$/", $this->container['postalCode'])) {
            $invalidProperties[] = "invalid value for 'postalCode', must be conform to the pattern /^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$/.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 80)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 80.";
        }

        if ((mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 20)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) < 1)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if (!is_null($this->container['contactName']) && (mb_strlen($this->container['contactName']) > 80)) {
            $invalidProperties[] = "invalid value for 'contactName', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['contactName']) && (mb_strlen($this->container['contactName']) < 3)) {
            $invalidProperties[] = "invalid value for 'contactName', the character length must be bigger than or equal to 3.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 80)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 80.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) < 3)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['lockerID'] === null) {
            $invalidProperties[] = "'lockerID' can't be null";
        }
        if (($this->container['lockerID'] > 999)) {
            $invalidProperties[] = "invalid value for 'lockerID', must be smaller than or equal to 999.";
        }

        if (($this->container['lockerID'] < 100)) {
            $invalidProperties[] = "invalid value for 'lockerID', must be bigger than or equal to 100.";
        }

        if ($this->container['postNumber'] === null) {
            $invalidProperties[] = "'postNumber' can't be null";
        }
        if ((mb_strlen($this->container['postNumber']) > 10)) {
            $invalidProperties[] = "invalid value for 'postNumber', the character length must be smaller than or equal to 10.";
        }

        if ((mb_strlen($this->container['postNumber']) < 3)) {
            $invalidProperties[] = "invalid value for 'postNumber', the character length must be bigger than or equal to 3.";
        }

        if (!preg_match("/^[0-9]{6,10}$/", $this->container['postNumber'])) {
            $invalidProperties[] = "invalid value for 'postNumber', must be conform to the pattern /^[0-9]{6,10}$/.";
        }

        if ($this->container['retailID'] === null) {
            $invalidProperties[] = "'retailID' can't be null";
        }
        if (($this->container['retailID'] > 999)) {
            $invalidProperties[] = "invalid value for 'retailID', must be smaller than or equal to 999.";
        }

        if (($this->container['retailID'] < 401)) {
            $invalidProperties[] = "invalid value for 'retailID', must be bigger than or equal to 401.";
        }

        if ($this->container['poBoxID'] === null) {
            $invalidProperties[] = "'poBoxID' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name1
     *
     * @return string
     */
    public function getName1()
    {
        return $this->container['name1'];
    }

    /**
     * Sets name1
     *
     * @param string $name1 Name1. Line 1 of name information
     *
     * @return self
     */
    public function setName1($name1)
    {
        if (is_null($name1)) {
            throw new \InvalidArgumentException('non-nullable name1 cannot be null');
        }
        if ((mb_strlen($name1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name1 when calling Consignee., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name1 when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['name1'] = $name1;

        return $this;
    }

    /**
     * Gets name2
     *
     * @return string|null
     */
    public function getName2()
    {
        return $this->container['name2'];
    }

    /**
     * Sets name2
     *
     * @param string|null $name2 An optional, additional line of name information
     *
     * @return self
     */
    public function setName2($name2)
    {
        if (is_null($name2)) {
            throw new \InvalidArgumentException('non-nullable name2 cannot be null');
        }
        if ((mb_strlen($name2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name2 when calling Consignee., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name2 when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['name2'] = $name2;

        return $this;
    }

    /**
     * Gets name3
     *
     * @return string|null
     */
    public function getName3()
    {
        return $this->container['name3'];
    }

    /**
     * Sets name3
     *
     * @param string|null $name3 An optional, additional line of name information
     *
     * @return self
     */
    public function setName3($name3)
    {
        if (is_null($name3)) {
            throw new \InvalidArgumentException('non-nullable name3 cannot be null');
        }
        if ((mb_strlen($name3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name3 when calling Consignee., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name3 when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['name3'] = $name3;

        return $this;
    }

    /**
     * Gets dispatchingInformation
     *
     * @return string|null
     */
    public function getDispatchingInformation()
    {
        return $this->container['dispatchingInformation'];
    }

    /**
     * Sets dispatchingInformation
     *
     * @param string|null $dispatchingInformation An optional, additional line of address. It is printed on the shipping label for international shipments to the following countries only BEL, CZE, NLD. It is positioned below name3 on the label.
     *
     * @return self
     */
    public function setDispatchingInformation($dispatchingInformation)
    {
        if (is_null($dispatchingInformation)) {
            throw new \InvalidArgumentException('non-nullable dispatchingInformation cannot be null');
        }
        if ((mb_strlen($dispatchingInformation) > 35)) {
            throw new \InvalidArgumentException('invalid length for $dispatchingInformation when calling Consignee., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($dispatchingInformation) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dispatchingInformation when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['dispatchingInformation'] = $dispatchingInformation;

        return $this;
    }

    /**
     * Gets addressStreet
     *
     * @return string
     */
    public function getAddressStreet()
    {
        return $this->container['addressStreet'];
    }

    /**
     * Sets addressStreet
     *
     * @param string $addressStreet Line 1 of the street address. This is just the street name. Can also include house number.
     *
     * @return self
     */
    public function setAddressStreet($addressStreet)
    {
        if (is_null($addressStreet)) {
            throw new \InvalidArgumentException('non-nullable addressStreet cannot be null');
        }
        if ((mb_strlen($addressStreet) > 50)) {
            throw new \InvalidArgumentException('invalid length for $addressStreet when calling Consignee., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($addressStreet) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addressStreet when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['addressStreet'] = $addressStreet;

        return $this;
    }

    /**
     * Gets addressHouse
     *
     * @return string|null
     */
    public function getAddressHouse()
    {
        return $this->container['addressHouse'];
    }

    /**
     * Sets addressHouse
     *
     * @param string|null $addressHouse Line 1 of the street address. This is just the house number. Can be added to street name instead.
     *
     * @return self
     */
    public function setAddressHouse($addressHouse)
    {
        if (is_null($addressHouse)) {
            throw new \InvalidArgumentException('non-nullable addressHouse cannot be null');
        }
        if ((mb_strlen($addressHouse) > 10)) {
            throw new \InvalidArgumentException('invalid length for $addressHouse when calling Consignee., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($addressHouse) < 1)) {
            throw new \InvalidArgumentException('invalid length for $addressHouse when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['addressHouse'] = $addressHouse;

        return $this;
    }

    /**
     * Gets additionalAddressInformation1
     *
     * @return string|null
     */
    public function getAdditionalAddressInformation1()
    {
        return $this->container['additionalAddressInformation1'];
    }

    /**
     * Sets additionalAddressInformation1
     *
     * @param string|null $additionalAddressInformation1 Additional information that is positioned either behind or below addressStreet on international shipment labels. Where exactly it is printed on the label depends on the country.
     *
     * @return self
     */
    public function setAdditionalAddressInformation1($additionalAddressInformation1)
    {
        if (is_null($additionalAddressInformation1)) {
            throw new \InvalidArgumentException('non-nullable additionalAddressInformation1 cannot be null');
        }
        if ((mb_strlen($additionalAddressInformation1) > 60)) {
            throw new \InvalidArgumentException('invalid length for $additionalAddressInformation1 when calling Consignee., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($additionalAddressInformation1) < 1)) {
            throw new \InvalidArgumentException('invalid length for $additionalAddressInformation1 when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['additionalAddressInformation1'] = $additionalAddressInformation1;

        return $this;
    }

    /**
     * Gets additionalAddressInformation2
     *
     * @return string|null
     */
    public function getAdditionalAddressInformation2()
    {
        return $this->container['additionalAddressInformation2'];
    }

    /**
     * Sets additionalAddressInformation2
     *
     * @param string|null $additionalAddressInformation2 Additional information that is positioned either behind or below addressStreet on international shipment labels. It is printed on shipping labels to the following countries only AUT, CHN, DNK, GBR, HRV, LTU, PRT, ROU, RUS. Where exactly it is printed on the label depends on the country.
     *
     * @return self
     */
    public function setAdditionalAddressInformation2($additionalAddressInformation2)
    {
        if (is_null($additionalAddressInformation2)) {
            throw new \InvalidArgumentException('non-nullable additionalAddressInformation2 cannot be null');
        }
        if ((mb_strlen($additionalAddressInformation2) > 60)) {
            throw new \InvalidArgumentException('invalid length for $additionalAddressInformation2 when calling Consignee., must be smaller than or equal to 60.');
        }
        if ((mb_strlen($additionalAddressInformation2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $additionalAddressInformation2 when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['additionalAddressInformation2'] = $additionalAddressInformation2;

        return $this;
    }

    /**
     * Gets postalCode
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postalCode'];
    }

    /**
     * Sets postalCode
     *
     * @param string $postalCode Postal code of the P.O. Box (Postfach) location
     *
     * @return self
     */
    public function setPostalCode($postalCode)
    {
        if (is_null($postalCode)) {
            throw new \InvalidArgumentException('non-nullable postalCode cannot be null');
        }
        if ((mb_strlen($postalCode) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling Consignee., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($postalCode) < 3)) {
            throw new \InvalidArgumentException('invalid length for $postalCode when calling Consignee., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$/", ObjectSerializer::toString($postalCode)))) {
            throw new \InvalidArgumentException("invalid value for \$postalCode when calling Consignee., must conform to the pattern /^[0-9A-Za-z]+([ -]?[0-9A-Za-z]+)*$/.");
        }

        $this->container['postalCode'] = $postalCode;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city City of the P.O. Box (Postfach) location
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            throw new \InvalidArgumentException('non-nullable city cannot be null');
        }
        if ((mb_strlen($city) > 80)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Consignee., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling Consignee., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state State, province or territory. For the USA please use the official regional ISO-Codes, e.g. US-AL.
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            throw new \InvalidArgumentException('non-nullable state cannot be null');
        }
        if ((mb_strlen($state) > 20)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Consignee., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($state) < 1)) {
            throw new \InvalidArgumentException('invalid length for $state when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \OpenAPI\Client\Dhl\Model\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \OpenAPI\Client\Dhl\Model\Country $country country
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets contactName
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contactName'];
    }

    /**
     * Sets contactName
     *
     * @param string|null $contactName optional contact name. (this is not the primary name printed on label)
     *
     * @return self
     */
    public function setContactName($contactName)
    {
        if (is_null($contactName)) {
            throw new \InvalidArgumentException('non-nullable contactName cannot be null');
        }
        if ((mb_strlen($contactName) > 80)) {
            throw new \InvalidArgumentException('invalid length for $contactName when calling Consignee., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($contactName) < 3)) {
            throw new \InvalidArgumentException('invalid length for $contactName when calling Consignee., must be bigger than or equal to 3.');
        }

        $this->container['contactName'] = $contactName;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone Please note that, in accordance with Art. 4 No. 11 GDPR, you must obtain the recipient's consent to forward their phone number to Deutsche Post DHL Group. For shipments within Germany, the phone number cannot be transmitted. In some countries the provision of a telephone number and/or e-mail address is mandatory for a delivery to a droppoint. If your recipient has objected to the disclosure of their telephone number and/or e-mail address, the shipment can only be delivered in these countries using the service Premium.
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        if ((mb_strlen($phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Consignee., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($phone) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email Email address of the consignee
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        if ((mb_strlen($email) > 80)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Consignee., must be smaller than or equal to 80.');
        }
        if ((mb_strlen($email) < 3)) {
            throw new \InvalidArgumentException('invalid length for $email when calling Consignee., must be bigger than or equal to 3.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Consignee., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Consignee., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets lockerID
     *
     * @return int
     */
    public function getLockerID()
    {
        return $this->container['lockerID'];
    }

    /**
     * Sets lockerID
     *
     * @param int $lockerID Packstationnummer. Three digit number identifying the parcel locker in conjunction with city and postal code
     *
     * @return self
     */
    public function setLockerID($lockerID)
    {
        if (is_null($lockerID)) {
            throw new \InvalidArgumentException('non-nullable lockerID cannot be null');
        }

        if (($lockerID > 999)) {
            throw new \InvalidArgumentException('invalid value for $lockerID when calling Consignee., must be smaller than or equal to 999.');
        }
        if (($lockerID < 100)) {
            throw new \InvalidArgumentException('invalid value for $lockerID when calling Consignee., must be bigger than or equal to 100.');
        }

        $this->container['lockerID'] = $lockerID;

        return $this;
    }

    /**
     * Gets postNumber
     *
     * @return string
     */
    public function getPostNumber()
    {
        return $this->container['postNumber'];
    }

    /**
     * Sets postNumber
     *
     * @param string $postNumber postNumber (Postnummer) is the official account number a private DHL Customer gets upon registration. To address a post office or retail outlet directly, either the post number or e-mail address of the consignee is needed.
     *
     * @return self
     */
    public function setPostNumber($postNumber)
    {
        if (is_null($postNumber)) {
            throw new \InvalidArgumentException('non-nullable postNumber cannot be null');
        }
        if ((mb_strlen($postNumber) > 10)) {
            throw new \InvalidArgumentException('invalid length for $postNumber when calling Consignee., must be smaller than or equal to 10.');
        }
        if ((mb_strlen($postNumber) < 3)) {
            throw new \InvalidArgumentException('invalid length for $postNumber when calling Consignee., must be bigger than or equal to 3.');
        }
        if ((!preg_match("/^[0-9]{6,10}$/", ObjectSerializer::toString($postNumber)))) {
            throw new \InvalidArgumentException("invalid value for \$postNumber when calling Consignee., must conform to the pattern /^[0-9]{6,10}$/.");
        }

        $this->container['postNumber'] = $postNumber;

        return $this;
    }

    /**
     * Gets retailID
     *
     * @return int
     */
    public function getRetailID()
    {
        return $this->container['retailID'];
    }

    /**
     * Sets retailID
     *
     * @param int $retailID Id or Number of Post office / Filiale / outlet / parcel shop
     *
     * @return self
     */
    public function setRetailID($retailID)
    {
        if (is_null($retailID)) {
            throw new \InvalidArgumentException('non-nullable retailID cannot be null');
        }

        if (($retailID > 999)) {
            throw new \InvalidArgumentException('invalid value for $retailID when calling Consignee., must be smaller than or equal to 999.');
        }
        if (($retailID < 401)) {
            throw new \InvalidArgumentException('invalid value for $retailID when calling Consignee., must be bigger than or equal to 401.');
        }

        $this->container['retailID'] = $retailID;

        return $this;
    }

    /**
     * Gets poBoxID
     *
     * @return int
     */
    public function getPoBoxID()
    {
        return $this->container['poBoxID'];
    }

    /**
     * Sets poBoxID
     *
     * @param int $poBoxID Number of P.O. Box (Postfach)
     *
     * @return self
     */
    public function setPoBoxID($poBoxID)
    {
        if (is_null($poBoxID)) {
            throw new \InvalidArgumentException('non-nullable poBoxID cannot be null');
        }
        $this->container['poBoxID'] = $poBoxID;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


