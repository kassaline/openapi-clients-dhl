<?php
/**
 * Shipment
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Parcel DE Shipping API (Post & Parcel Germany)
 *
 * Note: This is the specification of the DPDHL Group Parcel DE Shipping API for Post & Parcel Germany. This REST web service allows business customers to create shipping labels on demand.
 *
 * The version of the OpenAPI document: 2.1.8
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Dhl\Model;

use ArrayAccess;
use OpenAPI\Client\Dhl\ObjectSerializer;

/**
 * Shipment Class Doc Comment
 *
 * @category Class
 *
 * @description Container for all shipments. Mixed shipment products per request are supported. Each shipment has a dedicated shipper address (or shipper reference, or both).
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 *
 * @implements \ArrayAccess<string, mixed>
 */
class Shipment implements \JsonSerializable, ArrayAccess, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $openAPIModelName = 'Shipment';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $openAPITypes = [
        'product' => 'string',
        'billingNumber' => 'string',
        'refNo' => 'string',
        'costCenter' => 'string',
        'creationSoftware' => 'string',
        'shipDate' => '\DateTime',
        'shipper' => '\OpenAPI\Client\Dhl\Model\ShipmentShipper',
        'consignee' => '\OpenAPI\Client\Dhl\Model\Consignee',
        'details' => '\OpenAPI\Client\Dhl\Model\ShipmentDetails',
        'services' => '\OpenAPI\Client\Dhl\Model\VAS',
        'customs' => '\OpenAPI\Client\Dhl\Model\CustomsDetails',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     *
     * @phpstan-var array<string, string|null>
     *
     * @psalm-var array<string, string|null>
     */
    protected static $openAPIFormats = [
        'product' => null,
        'billingNumber' => null,
        'refNo' => null,
        'costCenter' => null,
        'creationSoftware' => null,
        'shipDate' => 'date',
        'shipper' => null,
        'consignee' => null,
        'details' => null,
        'services' => null,
        'customs' => null,
    ];

    /**
     * Array of nullable properties. Used for (de)serialization
     *
     * @var bool[]
     */
    protected static array $openAPINullables = [
        'product' => false,
        'billingNumber' => false,
        'refNo' => false,
        'costCenter' => false,
        'creationSoftware' => false,
        'shipDate' => false,
        'shipper' => false,
        'consignee' => false,
        'details' => false,
        'services' => false,
        'customs' => false,
    ];

    /**
     * If a nullable field gets set to null, insert it here
     *
     * @var bool[]
     */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return bool[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param  bool[]  $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product' => 'product',
        'billingNumber' => 'billingNumber',
        'refNo' => 'refNo',
        'costCenter' => 'costCenter',
        'creationSoftware' => 'creationSoftware',
        'shipDate' => 'shipDate',
        'shipper' => 'shipper',
        'consignee' => 'consignee',
        'details' => 'details',
        'services' => 'services',
        'customs' => 'customs',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product' => 'setProduct',
        'billingNumber' => 'setBillingNumber',
        'refNo' => 'setRefNo',
        'costCenter' => 'setCostCenter',
        'creationSoftware' => 'setCreationSoftware',
        'shipDate' => 'setShipDate',
        'shipper' => 'setShipper',
        'consignee' => 'setConsignee',
        'details' => 'setDetails',
        'services' => 'setServices',
        'customs' => 'setCustoms',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product' => 'getProduct',
        'billingNumber' => 'getBillingNumber',
        'refNo' => 'getRefNo',
        'costCenter' => 'getCostCenter',
        'creationSoftware' => 'getCreationSoftware',
        'shipDate' => 'getShipDate',
        'shipper' => 'getShipper',
        'consignee' => 'getConsignee',
        'details' => 'getDetails',
        'services' => 'getServices',
        'customs' => 'getCustoms',
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param  mixed[]  $data  Associated array of property values
     *                         initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('product', $data ?? [], null);
        $this->setIfExists('billingNumber', $data ?? [], null);
        $this->setIfExists('refNo', $data ?? [], null);
        $this->setIfExists('costCenter', $data ?? [], null);
        $this->setIfExists('creationSoftware', $data ?? [], null);
        $this->setIfExists('shipDate', $data ?? [], null);
        $this->setIfExists('shipper', $data ?? [], null);
        $this->setIfExists('consignee', $data ?? [], null);
        $this->setIfExists('details', $data ?? [], null);
        $this->setIfExists('services', $data ?? [], null);
        $this->setIfExists('customs', $data ?? [], null);
    }

    /**
     * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
     * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
     * $this->openAPINullablesSetToNull array
     *
     * @param  mixed  $defaultValue
     */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (! is_null($this->container['billingNumber']) && ! preg_match('/\\w{10}\\d{2}\\w{2}/', $this->container['billingNumber'])) {
            $invalidProperties[] = "invalid value for 'billingNumber', must be conform to the pattern /\\w{10}\\d{2}\\w{2}/.";
        }

        if (! is_null($this->container['refNo']) && (mb_strlen($this->container['refNo']) > 35)) {
            $invalidProperties[] = "invalid value for 'refNo', the character length must be smaller than or equal to 35.";
        }

        if (! is_null($this->container['refNo']) && (mb_strlen($this->container['refNo']) < 8)) {
            $invalidProperties[] = "invalid value for 'refNo', the character length must be bigger than or equal to 8.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param  string|null  $product  Determines the DHL Paket product to be used.  * V01PAK: DHL PAKET; * V53WPAK: DHL PAKET International; * V54EPAK: DHL Europaket; * V62WP: Warenpost; * V66WPI: Warenpost International
     * @return self
     */
    public function setProduct($product)
    {
        if (is_null($product)) {
            throw new \InvalidArgumentException('non-nullable product cannot be null');
        }
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets billingNumber
     *
     * @return string|null
     */
    public function getBillingNumber()
    {
        return $this->container['billingNumber'];
    }

    /**
     * Sets billingNumber
     *
     * @param  string|null  $billingNumber  14 digit long number that identifies the contract the shipment is booked on. Please note that in rare cases the last to characters can be letters. Digit 11 and digit 12 must correspondent to the number of the product, e.g. 333333333301tt can only be used for the product V01PAK (DHL Paket).
     * @return self
     */
    public function setBillingNumber($billingNumber)
    {
        if (is_null($billingNumber)) {
            throw new \InvalidArgumentException('non-nullable billingNumber cannot be null');
        }

        if ((! preg_match('/\\w{10}\\d{2}\\w{2}/', ObjectSerializer::toString($billingNumber)))) {
            throw new \InvalidArgumentException('invalid value for $billingNumber when calling Shipment., must conform to the pattern /\\w{10}\\d{2}\\w{2}/.');
        }

        $this->container['billingNumber'] = $billingNumber;

        return $this;
    }

    /**
     * Gets refNo
     *
     * @return string|null
     */
    public function getRefNo()
    {
        return $this->container['refNo'];
    }

    /**
     * Sets refNo
     *
     * @param  string|null  $refNo  A reference number that the user can assign for better association purposes. It appears on shipment labels. To use the reference number for tracking purposes, it should be at least 8 characters long and unique.
     * @return self
     */
    public function setRefNo($refNo)
    {
        if (is_null($refNo)) {
            throw new \InvalidArgumentException('non-nullable refNo cannot be null');
        }
        if ((mb_strlen($refNo) > 35)) {
            throw new \InvalidArgumentException('invalid length for $refNo when calling Shipment., must be smaller than or equal to 35.');
        }
        if ((mb_strlen($refNo) < 8)) {
            throw new \InvalidArgumentException('invalid length for $refNo when calling Shipment., must be bigger than or equal to 8.');
        }

        $this->container['refNo'] = $refNo;

        return $this;
    }

    /**
     * Gets costCenter
     *
     * @return string|null
     */
    public function getCostCenter()
    {
        return $this->container['costCenter'];
    }

    /**
     * Sets costCenter
     *
     * @param  string|null  $costCenter  Textfield that appears on the shipment label. It cannot be used to search for the shipment.
     * @return self
     */
    public function setCostCenter($costCenter)
    {
        if (is_null($costCenter)) {
            throw new \InvalidArgumentException('non-nullable costCenter cannot be null');
        }
        $this->container['costCenter'] = $costCenter;

        return $this;
    }

    /**
     * Gets creationSoftware
     *
     * @return string|null
     */
    public function getCreationSoftware()
    {
        return $this->container['creationSoftware'];
    }

    /**
     * Sets creationSoftware
     *
     * @param  string|null  $creationSoftware  Is only to be indicated by DHL partners.
     * @return self
     */
    public function setCreationSoftware($creationSoftware)
    {
        if (is_null($creationSoftware)) {
            throw new \InvalidArgumentException('non-nullable creationSoftware cannot be null');
        }
        $this->container['creationSoftware'] = $creationSoftware;

        return $this;
    }

    /**
     * Gets shipDate
     *
     * @return \DateTime|null
     */
    public function getShipDate()
    {
        return $this->container['shipDate'];
    }

    /**
     * Sets shipDate
     *
     * @param  \DateTime|null  $shipDate  Date the shipment is transferred to DHL. The shipment date can be the current date or a date up to a few days in the future. It must not be in the past. Iso format required: yyyy-mm-dd. On the shipment date the shipment will be automatically closed at your end of day closing time.
     * @return self
     */
    public function setShipDate($shipDate)
    {
        if (is_null($shipDate)) {
            throw new \InvalidArgumentException('non-nullable shipDate cannot be null');
        }
        $this->container['shipDate'] = $shipDate;

        return $this;
    }

    /**
     * Gets shipper
     *
     * @return \OpenAPI\Client\Dhl\Model\ShipmentShipper|null
     */
    public function getShipper()
    {
        return $this->container['shipper'];
    }

    /**
     * Sets shipper
     *
     * @param  \OpenAPI\Client\Dhl\Model\ShipmentShipper|null  $shipper  shipper
     * @return self
     */
    public function setShipper($shipper)
    {
        if (is_null($shipper)) {
            throw new \InvalidArgumentException('non-nullable shipper cannot be null');
        }
        $this->container['shipper'] = $shipper;

        return $this;
    }

    /**
     * Gets consignee
     *
     * @return \OpenAPI\Client\Dhl\Model\Consignee|null
     */
    public function getConsignee()
    {
        return $this->container['consignee'];
    }

    /**
     * Sets consignee
     *
     * @param  \OpenAPI\Client\Dhl\Model\Consignee|null  $consignee  consignee
     * @return self
     */
    public function setConsignee($consignee)
    {
        if (is_null($consignee)) {
            throw new \InvalidArgumentException('non-nullable consignee cannot be null');
        }
        $this->container['consignee'] = $consignee;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Dhl\Model\ShipmentDetails|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param  \OpenAPI\Client\Dhl\Model\ShipmentDetails|null  $details  details
     * @return self
     */
    public function setDetails($details)
    {
        if (is_null($details)) {
            throw new \InvalidArgumentException('non-nullable details cannot be null');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets services
     *
     * @return \OpenAPI\Client\Dhl\Model\VAS|null
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param  \OpenAPI\Client\Dhl\Model\VAS|null  $services  services
     * @return self
     */
    public function setServices($services)
    {
        if (is_null($services)) {
            throw new \InvalidArgumentException('non-nullable services cannot be null');
        }
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets customs
     *
     * @return \OpenAPI\Client\Dhl\Model\CustomsDetails|null
     */
    public function getCustoms()
    {
        return $this->container['customs'];
    }

    /**
     * Sets customs
     *
     * @param  \OpenAPI\Client\Dhl\Model\CustomsDetails|null  $customs  customs
     * @return self
     */
    public function setCustoms($customs)
    {
        if (is_null($customs)) {
            throw new \InvalidArgumentException('non-nullable customs cannot be null');
        }
        $this->container['customs'] = $customs;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  int  $offset  Offset
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  int  $offset  Offset
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  int|null  $offset  Offset
     * @param  mixed  $value  Value to be set
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  int  $offset  Offset
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
